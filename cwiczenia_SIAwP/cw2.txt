CREATE TABLE jobs AS
SELECT *
FROM HR.jobs;
CREATE TABLE locations AS
SELECT *
FROM HR.locations;
CREATE TABLE countries AS
SELECT *
FROM HR.countries;
CREATE TABLE job_history AS
SELECT *
FROM HR.job_history;
CREATE TABLE departments AS
SELECT *
FROM HR.departments;
CREATE TABLE employees AS
SELECT *
FROM HR.employees;
CREATE TABLE job_grades AS
SELECT *
FROM HR.job_grades;
CREATE TABLE regions AS
SELECT *
FROM HR.regions;

ALTER TABLE regions
    ADD PRIMARY KEY (REGION_ID);
ALTER TABLE countries
    ADD PRIMARY KEY (COUNTRY_ID);
ALTER TABLE countries
    ADD FOREIGN KEY (REGION_ID) REFERENCES regions (REGION_ID);
ALTER TABLE locations
    ADD PRIMARY KEY (LOCATION_ID);
ALTER TABLE locations
    ADD FOREIGN KEY (COUNTRY_ID) REFERENCES countries (COUNTRY_ID);
ALTER TABLE departments
    ADD PRIMARY KEY (DEPARTMENT_ID);
ALTER TABLE departments
    ADD FOREIGN KEY (LOCATION_ID) REFERENCES locations (LOCATION_ID);
ALTER TABLE employees
    ADD PRIMARY KEY (EMPLOYEE_ID);
ALTER TABLE employees
    ADD FOREIGN KEY (MANAGER_ID) REFERENCES employees (EMPLOYEE_ID);
ALTER TABLE departments
    ADD FOREIGN KEY (MANAGER_ID) REFERENCES employees (EMPLOYEE_ID);
ALTER TABLE employees
    ADD FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments (DEPARTMENT_ID);
ALTER TABLE jobs
    ADD PRIMARY KEY (JOB_ID);
ALTER TABLE employees
    ADD FOREIGN KEY (JOB_ID) REFERENCES jobs (JOB_ID);
ALTER TABLE job_history
    ADD FOREIGN KEY (EMPLOYEE_ID) REFERENCES employees (EMPLOYEE_ID);
ALTER TABLE job_history
    ADD FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments (DEPARTMENT_ID);
ALTER TABLE job_history
    ADD FOREIGN KEY (JOB_ID) REFERENCES jobs (JOB_ID);


-- cw 1
SELECT CONCAT(LAST_NAME, SALARY) AS wynagrodzenie
FROM employees
WHERE (SALARY BETWEEN 2000 AND 7000)
  AND (DEPARTMENT_ID = 20 OR DEPARTMENT_ID = 50)
ORDER BY LAST_NAME;

-- cw 2
SELECT HIRE_DATE, LAST_NAME, ${user_row}
FROM employees
WHERE (MANAGER_ID IS NOT NULL)
  AND (EXTRACT(YEAR FROM HIRE_DATE) = 2005)
ORDER BY (${user_row});

-- cw 3
SELECT CONCAT(FIRST_NAME, LAST_NAME) AS full_name, SALARY, PHONE_NUMBER
FROM EMPLOYEES
ORDER BY FIRST_NAME,
         CASE
             WHEN SUBSTR(LAST_NAME, 2, 1) = 'e' THEN PHONE_NUMBER END DESC;

-- cw 4
SELECT EMPLOYEES.FIRST_NAME,
       EMPLOYEES.LAST_NAME,
       ROUND(MONTHS_BETWEEN(JOB_HISTORY.END_DATE, JOB_HISTORY.START_DATE)) AS WORKED_MONTHS,
       CASE
           WHEN ROUND(MONTHS_BETWEEN(JOB_HISTORY.END_DATE, JOB_HISTORY.START_DATE)) < 150 THEN EMPLOYEES.SALARY * 1.10
           WHEN ROUND(MONTHS_BETWEEN(JOB_HISTORY.END_DATE, JOB_HISTORY.START_DATE)) > 150 AND
                ROUND(MONTHS_BETWEEN(JOB_HISTORY.END_DATE, JOB_HISTORY.START_DATE)) < 200 THEN EMPLOYEES.SALARY * 1.20
           WHEN ROUND(MONTHS_BETWEEN(JOB_HISTORY.END_DATE, JOB_HISTORY.START_DATE)) >= 200 THEN EMPLOYEES.SALARY * 1.30
           END                                                             AS WYSOKOSC_DODATKU
FROM EMPLOYEES
         INNER JOIN JOB_HISTORY ON JOB_HISTORY.EMPLOYEE_ID = EMPLOYEES.EMPLOYEE_ID
ORDER BY ROUND(MONTHS_BETWEEN(END_DATE, START_DATE));

-- cw 5
SELECT DEPARTMENTS.DEPARTMENT_NAME,
       SUM(EMPLOYEES.SALARY)        AS SUM_SALARY,
       ROUND(AVG(EMPLOYEES.SALARY)) AS AVG_SALARY
FROM EMPLOYEES
         INNER JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE EMPLOYEES.SALARY > 5000
GROUP BY DEPARTMENT_NAME;

-- cw 6
SELECT EMPLOYEES.LAST_NAME, DEPARTMENTS.DEPARTMENT_ID, DEPARTMENTS.DEPARTMENT_NAME, JOBS.JOB_ID
FROM EMPLOYEES
         JOIN DEPARTMENTS ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
         JOIN JOBS ON EMPLOYEES.JOB_ID = JOBS.JOB_ID
         JOIN LOCATIONS ON DEPARTMENTS.LOCATION_ID = LOCATIONS.LOCATION_ID
WHERE LOCATIONS.CITY = 'Toronto';

-- cw 7
SELECT CONCAT(e1.FIRST_NAME, e1.LAST_NAME) AS MANAGER_FULLNAME,
       CONCAT(e2.FIRST_NAME, e2.LAST_NAME) AS EMPLOYEE_FULL_NAME
FROM EMPLOYEES e1
         INNER JOIN EMPLOYEES e2 ON e2.MANAGER_ID = e1.EMPLOYEE_ID
WHERE e1.FIRST_NAME = 'Jennifer';

-- cw 8
SELECT *
FROM DEPARTMENTS
         LEFT JOIN EMPLOYEES ON EMPLOYEES.DEPARTMENT_ID = DEPARTMENTS.DEPARTMENT_ID
WHERE EMPLOYEES.DEPARTMENT_ID IS NULL;

-- cw 9
CREATE TABLE job_grades AS
SELECT *
FROM HR.job_grades;

-- cw 10
SELECT EMPLOYEES.FIRST_NAME,
       EMPLOYEES.LAST_NAME,
       JOBS.JOB_ID,
       DEPARTMENTS.DEPARTMENT_NAME,
       EMPLOYEES.SALARY,
       (SELECT GRADE FROM JOB_GRADES WHERE EMPLOYEES.SALARY >= MIN_SALARY AND EMPLOYEES.SALARY < MAX_SALARY) AS GRADE
FROM EMPLOYEES
         JOIN JOBS ON JOBS.JOB_ID = EMPLOYEES.JOB_ID
         JOIN DEPARTMENTS ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID;

-- cw 11
SELECT FIRST_NAME,
       LAST_NAME,
       SALARY
FROM EMPLOYEES
WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES);

-- cw 12
SELECT EMPLOYEES.EMPLOYEE_ID, EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME
FROM EMPLOYEES
INNER JOIN DEPARTMENTS ON DEPARTMENTS.DEPARTMENT_ID = EMPLOYEES.DEPARTMENT_ID
WHERE EMPLOYEES.LAST_NAME LIKE '%u%';
